* LISTCOM
* LIST.COMMON command
* Copyright (c) 2004 Ladybridge Systems, All Rights Reserved
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
* 
* Ladybridge Systems can be contacted via the www.openqm.com web site.
* 
* START-HISTORY:
* 13 Oct 04  2.0-5 Use message handler.
* 16 Sep 04  2.0-1 OpenQM launch. Earlier history details suppressed.
* END-HISTORY
*
* START-DESCRIPTION:
*
*    LIST.COMMON { ALL }
*
*       ALL    Show system common blocks (internal mode only)
*
* END-DESCRIPTION
*
* START-CODE


$internal
program list.common
$catalog $listcom

$include parser.h
$include int$keys.h
$include err.h

   parser = "!PARSER"
   show.all = @false

   internal = kernel(K$INTERNAL,-1)

   @system.return.code = -ER$ARGS      ;* Preset for command format errors

* ---------------  Step 1 -  Parse command

   call @parser(parser$reset, 0, @sentence, 0)
   call @parser(parser$get.token, token.type, token, keyword) ;* Verb

   loop
      call @parser(parser$get.token, token.type, token, keyword)
   until token.type = PARSER$END
      begin case
         case keyword = KW$ALL and internal
            show.all = @true
         case 1
            stop sysmsg(2018, token) ;* Unexpected token (xx) 
      end case
   repeat
   
   @system.return.code = 0

* ---------------  Step 2  -  Get list of commons

   call !sort(list.common(), commons, 'A')
   num.common = dcount(commons, @fm)

* ---------------  Step 3  -  Report

   found = @false
   for i = 1 to num.common
      s = commons<i>
      if s[1,1] # '$' or show.all then
         crt s
         found = @true
      end
   next i

   if not(found) then crt sysmsg(3235) ;* No named common blocks present

   return
end

* END-CODE
